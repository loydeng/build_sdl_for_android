import java.util.function.Consumer

plugins {
    id 'com.android.application'
}

android {
    ndkVersion "22.1.7171670"

    namespace 'com.sdl.build'
    compileSdk 33

    defaultConfig {
        applicationId "com.sdl.build"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            //ndkBuild {
            //    arguments "APP_PLATFORM=android-16"
            //    abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            //}
            cmake {
                cppFlags '-std=c++14'
                arguments "-DANDROID_APP_PLATFORM=android-21", "-DANDROID_STL=c++_static"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                //abiFilters 'arm64-v8a'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
            version '3.22.1'
        }
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

task cleanLib(group: 'custom'){
    doLast{
        delete(new File(projectDir,"output"))
    }
}

clean.finalizedBy(cleanLib)

class CopyLib {
    File source;
    File dstDir;

    CopyLib(File source, File dstDir) {
        this.source = source
        this.dstDir = dstDir
    }
}

task copyLibTask(group: 'custom') {
    doLast{
        String output = "output"
        String libName = "SDL"
        ArrayList<CopyLib> copyLibs = new ArrayList<>()
        File outDir = new File(projectDir, "build/intermediates/cmake")
        for (final def type in outDir.list()) {
            File objDir = new File(outDir, "${type}/obj")
            for (final def abi in objDir.list()) {
                File abiDir = new File(objDir, abi)
                for (final def lib in abiDir.list()) {
                    if (lib.contains(libName)) {
                        CopyLib copyLib = new CopyLib(new File(abiDir, lib),
                                new File(projectDir, "${output}/${type}/${abi}"))
                        copyLibs.add(copyLib)
                    }
                }
            }
        }
        // copy shared lib
        copyLibs.forEach(new Consumer<CopyLib>() {
            @Override
            void accept(CopyLib copyLib) {
                if (!copyLib.source.exists()) {
                    println("Warning: ${copyLib.source.absolutePath} is not exists")
                    return
                }
                File dstLib = new File(copyLib.dstDir, copyLib.source.name)
                if (!dstLib.exists() || dstLib.lastModified() < copyLib.source.lastModified()) {
                    copy {
                        from(copyLib.source)
                        into(copyLib.dstDir)
                    }
                }
            }
        })
        File dstInclude = new File(projectDir, "${output}/include")
        if (!dstInclude.exists()) {
            def srcInclude = new File(projectDir, "src/main/jni/SDL/include")
            copy {
                from(srcInclude)
                into(dstInclude)
                include('**/*.h')
            }
        }
    }
}

build.finalizedBy(copyLibTask)